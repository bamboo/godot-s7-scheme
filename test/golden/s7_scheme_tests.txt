Godot Engine v4.3.stable.official.77dcf97d8 - https://godotengine.org

Hello from Scheme!
(format #t "Hello from Scheme!
")=>String(Hello from Scheme!
)
an-integer=>int(41)
(+ 1 an-integer)=>int(42)
a-float=>float(41)
(+ 1 a-float)=>float(42)
(if a-false #t #f)=>bool(false)
(if a-true #t #f)=>bool(true)
(if (not a-false) #f #t)=>bool(false)
(if (not a-true) #f #t)=>bool(true)
(connected? *node* 'child_entered_tree 'handler)=>bool(true)
v1:s1
v2:s2
(connected? *node* 'child_entered_tree 'handler)=>bool(false)
(connected? *node* 'child_entered_tree handler)=>bool(true)
v1:p1
v1:p2
(connected? *node* 'child_entered_tree original-handler)=>bool(false)
(equal? v1 v2)=>bool(false)
(equal? v1 v3)=>bool(true)
(equal? v4 v5)=>bool(false)
(equal? v4 v6)=>bool(true)
(or (Variant? i1) (Variant? f1) (Variant? b1) (Variant? b2))=>bool(false)
(VariantType->string (Variant? v1))=>String(Array)
(VariantType->string (Variant? v2))=>String(Dictionary)
(VariantType->string (Variant? v3))=>String(String)
(Array)=>Array([])
(Array 1 2.0 "three" #t #f)=>Array([1, 2, "three", true, false])
(! a1 'map (lambda (x) (* 2 x)))=>Array([2, 4, 6])
(a1 `(map ,(lambda (x) (* 3 x))))=>Array([3, 6, 9])
(define (f x) (* 4 x))=>Callable(f)
a1=>Array([1, 2, 3])
(! a1 'map (Callable 'f))=>Array([<null>, <null>, <null>])
(! a1 'map (Callable 'f #f))=>Array([4, 8, 12])
(! a1 'map (Callable 'f #t))=>Array([<null>, <null>, <null>])
(Vector2 1.0 2.0)=>Vector2((1, 2))
(Vector2 1 2)=>Vector2((1, 2))
(Vector2i 1 2)=>Vector2i((1, 2))
(Rect2 1.0 2.0 3.0 4.0)=>Rect2([P: (1, 2), S: (3, 4)])
(Rect2 1 2 3 4)=>Rect2([P: (1, 2), S: (3, 4)])
(Rect2i 1 2 3 4)=>Rect2i([P: (1, 2), S: (3, 4)])
Loading res://addons/s7/lib/import.scm...
Loading res://addons/s7/lib/array.scm...

    (begin
      (require 'import)
      (import-class Performance :as p)
      (help 'p/get-monitor))
  =>String(float Performance.get_monitor(monitor: int))
(let ((d (Dictionary))) (set! (d 0) (Color "red")) d)=>Dictionary({ 0: (1, 0, 0, 1) })

    (define (test-for-each-on xs)
      (call-with-output-string
        (lambda (p)
          (for-each
            (lambda (x) (format p "(~A)" x))
            xs))))
  =>Callable(test-for-each-on)
(test-for-each-on array)=>String((1)(2)(3))
(test-for-each-on dictionary)=>String()
(test-for-each-on string)=>String((<variant S>)(<variant c>)(<variant h>)(<variant e>)(<variant m>)(<variant e>))
#\c=>int(99)
(char? roundtrip)=>bool(false)
(integer? roundtrip)=>bool(true)
:a-keyword-symbol=>StringName(:a-keyword-symbol)
(symbol? roundtrip)=>bool(true)
(lambda (x) (* x 2))=>Callable(#<lambda (x)>)
(procedure? roundtrip)=>bool(true)
(roundtrip 21)=>int(42)
#t=>bool(true)
(boolean? roundtrip)=>bool(true)
42=>int(42)
(integer? roundtrip)=>bool(true)
42.0=>float(42)
(real? roundtrip)=>bool(true)
()=>Object([Wrapped:0])
(list? roundtrip)=>bool(true)
'(1 . 2)=>Object([Wrapped:0])
(pair? roundtrip)=>bool(true)
'(1 2 3)=>Object([Wrapped:0])
(pair? roundtrip)=>bool(true)
#(1 2 3)=>Object([Wrapped:0])
(vector? roundtrip)=>bool(true)
#<undefined>=>Object([Wrapped:0])
(undefined? roundtrip)=>bool(true)
(define* (scheme-function (a #f) (b #t) (c 42)) (object->string (list a b c)))=>Callable(scheme-function)
(apply scheme-function)=>String((#f #t 42))
(apply scheme-function [1])=>String((1 #t 42))
(apply scheme-function [1, 2])=>String((1 2 42))
(apply scheme-function [1, 2, 3])=>String((1 2 3))
(apply scheme-function [1, 2, 3, 4])=>StringName(wrong-number-of-args)
(apply scheme-function [1, &":b", 2])=>String((1 2 42))
(apply scheme-function [1, &":b", 2, &":c", 33])=>String((1 2 33))
(apply non-existing-function [])=>StringName(syntax-error)
